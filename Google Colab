Object detection: tìm vị trí của đối tượng có trong ảnh/video đôi khi ngữ còn sử dụng để tìm ngữ nghĩa của một lớp nhất định trong hình ảnh/video.

YOLOvx: mô hình mạng CNN cho việc phát hiện, nhận dạng, phân loại đối tượng được tạo ra từ việc kết hợp giữa các convolutional layers và connected layers.
Trong đóp các convolutional layers sẽ trích xuất ra các feature của ảnh, còn full-connected layers sẽ dự đoán ra xác suất đó và tọa độ của đối tượng.

Google Colab: một dịch vụ miễn phí của Google (GPU, TPU) nhằm hỗ trợ nghiên cứu và học tập về AI. GC cung cấp môi trường Code như Jupyter Notebook.
********************************************************************************
Bước 1: Đăng nhập google drive và log in.
        Tạo mới folder “yolov3”.
        Nén toàn bộ tập tin ảnh và txt thành data.zip và tải lên Drive, bỏ trong thư mục darknet
        (LƯU Ý:) 
          Bỏ file classes.txt RA KHỎI THƯ MỤC trước khi ZIP
          Vì ở đây chỉ có 1 class nên cột dầu tiên của tất cả các file .txt là 0
          Thông thường khi gán nhãn không để ý có thể là 15, 16 hoặc số khác.
          CẦN HIỆU CHỈNH TRƯỚC KHI ZIP
        Kết quả: Google Colab_UploadData_ZIP.png (https://github.com/thinhdoanvu/ObjectDetection/blob/main/Google%20Colab_UploadData_ZIP.png)
********************************************************************************
Bước 2: Truy cập https://colab.research.google.com/
  Sign In: Sử dụng Email của Google
********************************************************************************  
Bước 3: File - Upload Notebook - Train_YoloV3.ipynb
  Tập tin trong folder train_yolo_to_detect_custom_object đã được tải ở pysource.com hoặc từ github ở respository này.
  Xem ảnh Google colab_UploadTrainning_notebook.png (https://github.com/thinhdoanvu/ObjectDetection/blob/main/Google%20colab_UploadTrainning_notebook.png)
********************************************************************************  
Bước 4: enable the GPU
  Edit - Notebook Settings - GPU
  Kết quả: Xem ảnh Google Colab_SetGPU.png (https://github.com/thinhdoanvu/ObjectDetection/blob/main/Google%20Colab_SetGPU.png)
********************************************************************************
Bước 5: Thực hiện "Connect google drive"
  5.1. # Check if NVIDIA GPU is enabled
  !nvidia-smi
  
  Kết quả: 
  Fri Sep  9 08:57:13 2022       
+-----------------------------------------------------------------------------+
| NVIDIA-SMI 460.32.03    Driver Version: 460.32.03    CUDA Version: 11.2     |

  5.2. Liên kết với Google drive
  from google.colab import drive
  drive.mount('/content/gdrive')
  !ln -s /content/gdrive/My\ Drive/ /mydrive
  !ls /mydrive
     
  Xem ảnh Google Colab_ImportDrive.png (https://github.com/thinhdoanvu/ObjectDetection/blob/main/Google%20Colab_ImportDrive.png) 
  Xem ảnh Google Colab_ImportDrive_Accept.png (https://github.com/thinhdoanvu/ObjectDetection/blob/main/Google%20Colab_ImportDrive_Accept.png)
  Xác nhận quyền truy cập đến Google Drive.
  Kết quả: Mounted at /content/gdrive
********************************************************************************  
Bước 6: Cập nhật các Package: Clik +Code (Có thể code thêm hoặc bỏ qua)
  !apt-get update
  !apt-get upgrade
  Click PLAY again
  Kết quả: Xem ảnh Google Colab_Update.png (https://github.com/thinhdoanvu/ObjectDetection/blob/main/Google%20Colab_Update.png)
********************************************************************************
Bước 7: Clone the Darknet
  !rm -rf darknet #Xóa thư mục darknet nếu có 
  %cd "/mydrive/yolov3_Sep2022" # truy cập vào thư mục yolov3_Sep2022 trong Drive
  !git clone https://github.com/AlexeyAB/darknet #Tải model về Drive 
  !rm -rf data #Xóa thư mục data trong thư mục darknet
  !mkdir backup # tạo thư mục backup để lưu các file trọng số sau đào tạo 

  Kết quả: 
    Cloning into 'darknet'...
    remote: Enumerating objects: 15490, done.
    remote: Counting objects: 100% (30/30), done.
    remote: Compressing objects: 100% (20/20), done.
    remote: Total 15490 (delta 10), reused 20 (delta 8), pack-reused 15460
    Receiving objects: 100% (15490/15490), 14.08 MiB | 23.75 MiB/s, done.
    Resolving deltas: 100% (10398/10398), done.
********************************************************************************  
Bước 8: Compile Darknet using Nvidia GPU
  # change makefile to have GPU and OPENCV enabled
  %cd darknet
  !sed -i 's/OPENCV=0/OPENCV=1/' Makefile
  !sed -i 's/GPU=0/GPU=1/' Makefile
  !sed -i 's/CUDNN=0/CUDNN=1/' Makefile
  !make
  
  Kết quả:
  nvcc -gencode arch=compute_35,code=sm_35 -gencode arch=compute_50,code=[sm_50,compute_50] -gencode arch=compute_52,code=[sm_52,compute_52] -gencode arch=compute_61,code=[sm_61,compute_61] -Iinclude/ -I3rdparty/stb/include -DOPENCV `pkg-config --cflags opencv4 2> /dev/null || pkg-config --cflags opencv` -DGPU -I/usr/local/cuda/include/ -DCUDNN --compiler-options "-Wall -Wfatal-errors -Wno-unused-result -Wno-unknown-pragmas -fPIC -Ofast -DOPENCV -DGPU -DCUDNN -I/usr/local/cudnn/include" -c ./src/avgpool_layer_kernels.cu -o obj/avgpool_layer_kernels.o
  nvcc warning : The 'compute_35', 'compute_37', 'compute_50', 'sm_35', 'sm_37' and 'sm_50' architectures are deprecated, and may be removed in a future release (Use -Wno-deprecated-gpu-targets to suppress warning).
  g++ -std=c++11 -std=c++11 -Iinclude/ -I3rdparty/stb/include -DOPENCV `pkg-config --cflags opencv4 2> /dev/null || pkg-config --cflags opencv` -DGPU -I/usr/local/cuda/include/ -DCUDNN -Wall -Wfatal-errors -Wno-unused-result -Wno-unknown-pragmas -fPIC -Ofast -DOPENCV -DGPU -DCUDNN -I/usr/local/cudnn/include obj/image_opencv.o obj/http_stream.o obj/gemm.o obj/utils.o obj/dark_cuda.o obj/convolutional_layer.o obj/list.o obj/image.o obj/activations.o obj/im2col.o obj/col2im.o obj/blas.o obj/crop_layer.o obj/dropout_layer.o obj/maxpool_layer.o obj/softmax_layer.o obj/data.o obj/matrix.o obj/network.o obj/connected_layer.o obj/cost_layer.o obj/parser.o obj/option_list.o obj/darknet.o obj/detection_layer.o obj/captcha.o obj/route_layer.o obj/writing.o obj/box.o obj/nightmare.o obj/normalization_layer.o obj/avgpool_layer.o obj/coco.o obj/dice.o obj/yolo.o obj/detector.o obj/layer.o obj/compare.o obj/classifier.o obj/local_layer.o obj/swag.o obj/shortcut_layer.o obj/representation_layer.o obj/activation_layer.o obj/rnn_layer.o obj/gru_layer.o obj/rnn.o obj/rnn_vid.o obj/crnn_layer.o obj/demo.o obj/tag.o obj/cifar.o obj/go.o obj/batchnorm_layer.o obj/art.o obj/region_layer.o obj/reorg_layer.o obj/reorg_old_layer.o obj/super.o obj/voxel.o obj/tree.o obj/yolo_layer.o obj/gaussian_yolo_layer.o obj/upsample_layer.o obj/lstm_layer.o obj/conv_lstm_layer.o obj/scale_channels_layer.o obj/sam_layer.o obj/convolutional_kernels.o obj/activation_kernels.o obj/im2col_kernels.o obj/col2im_kernels.o obj/blas_kernels.o obj/crop_layer_kernels.o obj/dropout_layer_kernels.o obj/maxpool_layer_kernels.o obj/network_kernels.o obj/avgpool_layer_kernels.o -o darknet -lm -pthread `pkg-config --libs opencv4 2> /dev/null || pkg-config --libs opencv` -L/usr/local/cuda/lib64 -lcuda -lcudart -lcublas -lcurand -L/usr/local/cudnn/lib64 -lcudnn -lstdc++
********************************************************************************
Bước 9: Configure Darknet network for training YOLO V3
  9.1 Copy file cấu hình
     !cp cfg/yolov3.cfg cfg/yolov3_training.cfg
     
  9.2. Thiết lập cấu hình: classes trong mục [yolo] = số nhãn(classes của bạn), sửa filters = (số nhãn +5)*3 trong mục [Convolution] nằm trước mục [yolo]. 
      Model của mình sẽ sửa thành classes = 1 
      Model của mình có số nhãn là 1 thì để filters =18, số nhãn bằng 2 thì để filters = 21
      
     !sed -i 's/batch=1/batch=64/' cfg/yolov3_training.cfg
     !sed -i 's/subdivisions=1/subdivisions=16/' cfg/yolov3_training.cfg
     !sed -i 's/max_batches = 500200/max_batches = 4000/' cfg/yolov3_training.cfg
     !sed -i '610 s@classes=80@classes=1@' cfg/yolov3_training.cfg
     !sed -i '696 s@classes=80@classes=1@' cfg/yolov3_training.cfg
     !sed -i '783 s@classes=80@classes=1@' cfg/yolov3_training.cfg
     !sed -i '603 s@filters=255@filters=18@' cfg/yolov3_training.cfg
     !sed -i '689 s@filters=255@filters=18@' cfg/yolov3_training.cfg
     !sed -i '776 s@filters=255@filters=18@' cfg/yolov3_training.cfg    
********************************************************************************
Bước 10: Tạo file obj.name = classses
  !echo "hongcau" > data/obj.names
  !echo -e 'classes= 1\ntrain  = data/train.txt\nvalid  = data/test.txt\nnames = data/obj.names\nbackup = /mydrive/yolov3_Sep2022' > data/obj.data
  !mkdir data/obj
********************************************************************************
Bước 11: # Download weights darknet model 53
  !wget https://pjreddie.com/media/files/da
   
  Kết quả:
  --2022-09-09 09:46:57--  https://pjreddie.com/media/files/darknet53.conv.74
  Resolving pjreddie.com (pjreddie.com)... 128.208.4.108
  Connecting to pjreddie.com (pjreddie.com)|128.208.4.108|:443... connected.
  HTTP request sent, awaiting response... 200 OK
  Length: 162482580 (155M) [application/octet-stream]
  Saving to: ‘darknet53.conv.74’
  darknet53.conv.74   100%[===================>] 154.96M  42.7MB/s    in 4.0s    
********************************************************************************
Bước 12: Extract Images
  !unzip ../data.zip -d data/obj
  
********************************************************************************
  CHUẨN BỊ TRAINNING
  # We're going to convert the class index on the .txt files. As we're working with only one class, it's supposed to be class 0.
  # If the index is different from 0 then we're going to change it.
********************************************************************************
Bước 13: import các thư viện
import glob
import os
import re

txt_file_paths = glob.glob(r"data/obj/*.txt")
for i, file_path in enumerate(txt_file_paths):
    # get image size
    with open(file_path, "r") as f_o:
        lines = f_o.readlines()

        text_converted = []
        for line in lines:
            print(line)
            numbers = re.findall("[0-9.]+", line)
            print(numbers)
            if numbers:

                # Define coordinates
                text = "{} {} {} {} {}".format(0, numbers[1], numbers[2], numbers[3], numbers[4])
                text_converted.append(text)
                print(i, file_path)
                print(text)
        # Write file
        with open(file_path, 'w') as fp:
            for item in text_converted:
                fp.writelines("%s\n" % item)
********************************************************************************  
CHÚ Ý: Khi gán nhãn, có thể máy tính Windows sẽ auto bỏ các thành phần số 0 ở cuối dẫn đến
Chiều dài của các cột không thống nhất. Nên sử dụng công thức Excel để gán lại cho bằng 8
********************************************************************************  
Bước 14: Tạo List images
  import glob
  images_list = glob.glob("data/obj/*.jpg")
  print(images_list)
  
  Kết quả: ['data/obj/2022-08-16-c4-D32-GS1M-25M-0026.jpg', ...
********************************************************************************  
Bước 15: Pretrain
  (LƯU Ý: Sau 6 phút Google Colab tự động đăng xuất nên nếu BÁO LỖI không tìm thấy thư mục gdrive/... thì connect lại từ bước 1 -  Import)
  
  !chmod +x ./darknet
  !./darknet detector train data/obj.data cfg/yolov3_training.cfg darknet53.conv.74 -dont_show
  ******************************************************************************** 
  GIẢI THÍCH:
  “!./darknet detector train” là truy cập vào thư mục darknet và thực hiện lệnh train
  yolo.data, cfg/olov3_training.cfg là các file ta đã tạo và sửa ở trên
  yolov3_training.cfg darknet53.conv.74 là file ta đã tải ở bước xxx
  -dont_show để tạo ra biểu đồ của loss function phục vụ quá trình giám sát và đánh giá mô hình
  -map tạo ra biểu đồ mAP.
 ********************************************************************************
  AUTO REFRESH PAGE
  auto_refresh_page.sh
 ******************************************************************************** 
                                STOP TRAINNING
 ******************************************************************************** 
   Trong quá trình train, output được xuất liên tục. Chúng ta chỉ cần quan tâm tới một số vấn đề :1: 3619.999512, 3619.999512 avg loss​ :
        “1″ chính là số vòng train.
        3619.999512 avg loss​: chính là loss.
******************************************************************************** 
Bước 16: Test the model 
Download file yolov3_training_last.weights trong yolov3_Sep2022 (GD) và đặt cùng folder với yolo_object_detection.py and yolov3_testing.cfg.
Ngoài ra, file test.log và test_new.log thể hiện kết quả thực thi (GD/yolov3_Sep2022/scripts/log_parser/

Mở file yolo_object_detection.py và sửa:
  Dòng 11 "Koala" thành hongcau (tên class mình đặt ban đầu)
    # Name custom object
    classes = ["Koala"]
  Dòng 14: thư mục chứa hình ảnh
  # Images path
  images_path = glob.glob(r"D:\Pysource\Youtube205) Train Yolo google cloud\dataset\*.jpg")
  thành
  images_path = glob.glob(r"/home/dthinh/DanQuynh/Thunghiem/*.jpg")
  
  Thực hiện:
  python3 yolo_object_detection.py
&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
KÉT QUẢ LÀ CHƯƠNG TRÌNH CHẠY KHÁ NGU: NHẬN DẠNG ĐƯỢC RẤT ÍT. 
DO ĐÓ, SỬ DỤNG YOLO4 SẼ TỐT HƠN RẤT NHIỀU
VẪN DÙNG FILE CONFIG CỦA YOLO3 (NHƯ TRONG GITHUB VÀ KHÔNG CẦN THAY THẾ CÁC CHỈ SỐ NHƯ COLAB
(VÌ NÓ LÀM RỒI)
&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
1. Sửa file coco.names (trong thư mục yolo4/data)
Dòng 1: hc

2. Sửa file yolo4/cfg/coco.data
Dòng 1: classes 80 thành 1

3. darknet detect yolov3_testing.cfg yolov3_training_last.weights *jpg > res.txt
./darknet detect ../train_yolo_to_detect_custom_object_2022Sep/yolo_custom_detection/yolov3_testing.cfg ../train_yolo_to_detect_custom_object_2022Sep/yolo_custom_detection/yolov3_training_last.weights ../../DanQuynh/Thunghiem/2022-08-16-c4-D32-GS1M-25M-0026.jpg > ../../DanQuynh/Thunghiem/res.txt

Kết quả hình ảnh được lưu trong thư mục yolo4 với tên file là: predictions.jpg
