Object detection: tìm vị trí của đối tượng có trong ảnh/video đôi khi ngữ còn sử dụng để tìm ngữ nghĩa của một lớp nhất định trong hình ảnh/video.

YOLOvx: mô hình mạng CNN cho việc phát hiện, nhận dạng, phân loại đối tượng được tạo ra từ việc kết hợp giữa các convolutional layers và connected layers.
Trong đóp các convolutional layers sẽ trích xuất ra các feature của ảnh, còn full-connected layers sẽ dự đoán ra xác suất đó và tọa độ của đối tượng.

Google Colab: một dịch vụ miễn phí của Google (GPU, TPU) nhằm hỗ trợ nghiên cứu và học tập về AI. GC cung cấp môi trường Code như Jupyter Notebook.

Bước 1: Đăng nhập google drive và log in.
        Tạo mới folder “yolov3”.
        Nén toàn bộ tập tin ảnh và txt thành data.zip và tải lên Drive, bỏ trong thư mục darknet
        (LƯU Ý:) 
          Bỏ file classes.txt RA KHỎI THƯ MỤC trước khi ZIP
          Vì ở đây chỉ có 1 class nên cột dầu tiên của tất cả các file .txt là 0
          Thông thường khi gán nhãn không để ý có thể là 15, 16 hoặc số khác.
          CẦN HIỆU CHỈNH TRƯỚC KHI ZIP
        Kết quả: Google Colab_UploadData_ZIP.png (https://github.com/thinhdoanvu/ObjectDetection/blob/main/Google%20Colab_UploadData_ZIP.png)

Bước 2: Truy cập https://colab.research.google.com/
  Sign In: Sử dụng Email của Google
  
Bước 3: File - Upload Notebook - Train_YoloV3.ipynb
  Tập tin trong folder train_yolo_to_detect_custom_object đã được tải ở pysource.com hoặc từ github ở respository này.
  Xem ảnh Google colab_UploadTrainning_notebook.png (https://github.com/thinhdoanvu/ObjectDetection/blob/main/Google%20colab_UploadTrainning_notebook.png)
  
Bước 4: enable the GPU
  Edit - Notebook Settings - GPU
  Kết quả: Xem ảnh Google Colab_SetGPU.png (https://github.com/thinhdoanvu/ObjectDetection/blob/main/Google%20Colab_SetGPU.png)

Bước 5: Thực hiện "Connect google drive"
  5.1. # Check if NVIDIA GPU is enabled
  !nvidia-smi
  
  Kết quả: 
  Fri Sep  9 08:57:13 2022       
+-----------------------------------------------------------------------------+
| NVIDIA-SMI 460.32.03    Driver Version: 460.32.03    CUDA Version: 11.2     |

  5.2. Liên kết với Google drive
  from google.colab import drive
  drive.mount('/content/gdrive')
  !ln -s /content/gdrive/My\ Drive/ /mydrive
  !ls /mydrive
     
  Xem ảnh Google Colab_ImportDrive.png (https://github.com/thinhdoanvu/ObjectDetection/blob/main/Google%20Colab_ImportDrive.png) 
  Xem ảnh Google Colab_ImportDrive_Accept.png (https://github.com/thinhdoanvu/ObjectDetection/blob/main/Google%20Colab_ImportDrive_Accept.png)
  Xác nhận quyền truy cập đến Google Drive.
  Kết quả: Mounted at /content/gdrive
  
Bước 6: Cập nhật các Package: Clik +Code (Có thể code thêm hoặc bỏ qua)
  !apt-get update
  !apt-get upgrade
  Click PLAY again
  Kết quả: Xem ảnh Google Colab_Update.png (https://github.com/thinhdoanvu/ObjectDetection/blob/main/Google%20Colab_Update.png)

Bước 7: Clone the Darknet
  !rm -rf darknet #Xóa thư mục darknet nếu có 
  %cd "/mydrive/yolov3_Sep2022" # truy cập vào thư mục yolov3_Sep2022 trong Drive
  !git clone https://github.com/AlexeyAB/darknet #Tải model về Drive 
  !rm -rf data #Xóa thư mục data trong thư mục darknet
  !mkdir backup # tạo thư mục backup để lưu các file trọng số sau đào tạo 

  Kết quả: 
    Cloning into 'darknet'...
    remote: Enumerating objects: 15490, done.
    remote: Counting objects: 100% (30/30), done.
    remote: Compressing objects: 100% (20/20), done.
    remote: Total 15490 (delta 10), reused 20 (delta 8), pack-reused 15460
    Receiving objects: 100% (15490/15490), 14.08 MiB | 23.75 MiB/s, done.
    Resolving deltas: 100% (10398/10398), done.
  
Bước 8: Compile Darknet using Nvidia GPU
  # change makefile to have GPU and OPENCV enabled
  %cd darknet
  !sed -i 's/OPENCV=0/OPENCV=1/' Makefile
  !sed -i 's/GPU=0/GPU=1/' Makefile
  !sed -i 's/CUDNN=0/CUDNN=1/' Makefile
  !make
  
  Kết quả:
  nvcc -gencode arch=compute_35,code=sm_35 -gencode arch=compute_50,code=[sm_50,compute_50] -gencode arch=compute_52,code=[sm_52,compute_52] -gencode arch=compute_61,code=[sm_61,compute_61] -Iinclude/ -I3rdparty/stb/include -DOPENCV `pkg-config --cflags opencv4 2> /dev/null || pkg-config --cflags opencv` -DGPU -I/usr/local/cuda/include/ -DCUDNN --compiler-options "-Wall -Wfatal-errors -Wno-unused-result -Wno-unknown-pragmas -fPIC -Ofast -DOPENCV -DGPU -DCUDNN -I/usr/local/cudnn/include" -c ./src/avgpool_layer_kernels.cu -o obj/avgpool_layer_kernels.o
  nvcc warning : The 'compute_35', 'compute_37', 'compute_50', 'sm_35', 'sm_37' and 'sm_50' architectures are deprecated, and may be removed in a future release (Use -Wno-deprecated-gpu-targets to suppress warning).
  g++ -std=c++11 -std=c++11 -Iinclude/ -I3rdparty/stb/include -DOPENCV `pkg-config --cflags opencv4 2> /dev/null || pkg-config --cflags opencv` -DGPU -I/usr/local/cuda/include/ -DCUDNN -Wall -Wfatal-errors -Wno-unused-result -Wno-unknown-pragmas -fPIC -Ofast -DOPENCV -DGPU -DCUDNN -I/usr/local/cudnn/include obj/image_opencv.o obj/http_stream.o obj/gemm.o obj/utils.o obj/dark_cuda.o obj/convolutional_layer.o obj/list.o obj/image.o obj/activations.o obj/im2col.o obj/col2im.o obj/blas.o obj/crop_layer.o obj/dropout_layer.o obj/maxpool_layer.o obj/softmax_layer.o obj/data.o obj/matrix.o obj/network.o obj/connected_layer.o obj/cost_layer.o obj/parser.o obj/option_list.o obj/darknet.o obj/detection_layer.o obj/captcha.o obj/route_layer.o obj/writing.o obj/box.o obj/nightmare.o obj/normalization_layer.o obj/avgpool_layer.o obj/coco.o obj/dice.o obj/yolo.o obj/detector.o obj/layer.o obj/compare.o obj/classifier.o obj/local_layer.o obj/swag.o obj/shortcut_layer.o obj/representation_layer.o obj/activation_layer.o obj/rnn_layer.o obj/gru_layer.o obj/rnn.o obj/rnn_vid.o obj/crnn_layer.o obj/demo.o obj/tag.o obj/cifar.o obj/go.o obj/batchnorm_layer.o obj/art.o obj/region_layer.o obj/reorg_layer.o obj/reorg_old_layer.o obj/super.o obj/voxel.o obj/tree.o obj/yolo_layer.o obj/gaussian_yolo_layer.o obj/upsample_layer.o obj/lstm_layer.o obj/conv_lstm_layer.o obj/scale_channels_layer.o obj/sam_layer.o obj/convolutional_kernels.o obj/activation_kernels.o obj/im2col_kernels.o obj/col2im_kernels.o obj/blas_kernels.o obj/crop_layer_kernels.o obj/dropout_layer_kernels.o obj/maxpool_layer_kernels.o obj/network_kernels.o obj/avgpool_layer_kernels.o -o darknet -lm -pthread `pkg-config --libs opencv4 2> /dev/null || pkg-config --libs opencv` -L/usr/local/cuda/lib64 -lcuda -lcudart -lcublas -lcurand -L/usr/local/cudnn/lib64 -lcudnn -lstdc++

Bước 9: Configure Darknet network for training YOLO V3
  9.1 Copy file cấu hình
     !cp cfg/yolov3.cfg cfg/yolov3_training.cfg
     
  9.2. Thiết lập cấu hình: classes trong mục [yolo] = số nhãn(classes của bạn), sửa filters = (số nhãn +5)*3 trong mục [Convolution] nằm trước mục [yolo]. 
      Model của mình sẽ sửa thành classes = 1 
      Model của mình có số nhãn là 1 thì để filters =18, số nhãn bằng 2 thì để filters = 21
      
     !sed -i 's/batch=1/batch=64/' cfg/yolov3_training.cfg
     !sed -i 's/subdivisions=1/subdivisions=16/' cfg/yolov3_training.cfg
     !sed -i 's/max_batches = 500200/max_batches = 4000/' cfg/yolov3_training.cfg
     !sed -i '610 s@classes=80@classes=1@' cfg/yolov3_training.cfg
     !sed -i '696 s@classes=80@classes=1@' cfg/yolov3_training.cfg
     !sed -i '783 s@classes=80@classes=1@' cfg/yolov3_training.cfg
     !sed -i '603 s@filters=255@filters=18@' cfg/yolov3_training.cfg
     !sed -i '689 s@filters=255@filters=18@' cfg/yolov3_training.cfg
     !sed -i '776 s@filters=255@filters=18@' cfg/yolov3_training.cfg
      

Bước 10: login to folder trên google drive để lưu trữ các file weights
  %cd "/mydrive/yolov3_Sep2022"
  (Thư mục yolov3_Sep2022 được tạo ra từ bước 1)
  
  train.txt (chứa địa chỉ của các file ảnh đưa vào quá trình train model) 
  val.txt (chứa địa chỉ của các file ảnh đưa vào quá trình test và đánh giá model)
  ********************************************************************************
  CHÚ Ý KHOẢNG CÁCH CÁC DẤU CÁCH: VÌ ĐÂY LÀ CODE PYTHON
  ********************************************************************************
%cd /content/gdrive/My Drive/darknet/

#import các thư viện
import glob2
import math  
import os
import numpy as np

#LOAD FILE ẢNH
files = []
for ext in ["*.png", "*.jpeg", "*.jpg"]:
  image_files = glob2.glob(os.path.join("data/", ext))
  #tìm kiếm các file có đuôi dạng: png, jpeg, jpg trong thư mục data
  print(image_files)
  files += image_files
  #lưu tất cả các file vào biến files
  print(len(files))

nb_val = math.floor(len(files)*0.2)
#Biến nb_val được gán bằng 0.2 độ dài của biến files(chứa tất cả các tên anh)
rand_idx = np.random.randint(0, len(files), nb_val)
#Chọn ngẫu nhiên các ảnh trong biến files

# Tạo file train.txt
with open("/content/gdrive/My Drive/darknet/train.txt", "w") as f:
  for idx in np.arange(len(files)):
    if (os.path.exists(files[idx][:-3] + "txt")):
      f.write(files[idx]+'\n')

# Tạo file val.txt
with open("/content/gdrive/My Drive/darknet/val.txt", "w") as f:
  for idx in np.arange(len(files)):
    if (idx in rand_idx) and (os.path.exists(files[idx][:-3] + "txt")):
      f.write(files[idx]+'\n')
 print('done2')
  
********************************************************************************  
  Kết quả:
    Xem ảnh Google Colab_train.txt_Inside.png (https://github.com/thinhdoanvu/ObjectDetection/blob/main/Google%20Colab_train.txt_Inside.png)
    Xem ảnh: Google Colab_val.txt_Inside.png (https://github.com/thinhdoanvu/ObjectDetection/blob/main/Google%20Colab_val.txt_Inside.png)

Bước 7: Tạo các file cấu hình cho model
  Bước 7.1. Đổi tên classes.txt thành tên yolo.names (file class khi dùng LabelImg)
  Bước 7.2. Tạo file yolo.data có định dạng như sau (backup = thư mục backup)
    classes = 1
    train = train.txt
    valid = val.txt
    names = yolo.names
    backup = backup
  Kết quả: Xem ảnh Google Colab_names_data_inside.png (https://github.com/thinhdoanvu/ObjectDetection/blob/main/Google%Colab_names_data_inside.png)
  
******************************************************************************** 
  Truy cập darknet/makefile. Mở file makefile và sửa 4 dòng đầu tiên (sửa số 0 thành số 1):
    (Nếu không sửa online được thì tải về - Edit - Upload lên lại)
      GPU=1
      CUDNN=1
      CUDNN_HALF=1
      OPENCV=1
    Kết quả: Xem ảnh Google Colab_Makefile_Edit.png (https://github.com/thinhdoanvu/ObjectDetection/blob/main/Google%20Colab_Makefile_Edit.png)


   
******************************************************************************** 
Bước 9. Tải pretrain
  %cd /content/gdrive/My\ Drive/darknet
  !wget https://github.com/AlexeyAB/darknet/releases/download/darknet_yolo_v3_optimal/yolov4.conv.137
  (LƯU Ý: Sau 6 phút Google Colab tự động đăng xuất nên nếu BÁO LỖI không tìm thấy thư mục gdrive/... thì connect lại từ bước 1 -  Import)

Bước 10: Make darknet
  %cd /content/gdrive/My\ Drive/darknet
  !make clean
  !make
  !chmod +x ./darknet

Bước 11: Train model
   kiểm tra lại các bước xem đầy đủ chưa nhé!
    1. Tạo file train.txt, val.txt
    2.Tạo file yolo.names, yolo.data
    3. Sửa makefile và bật GPU
    4. Sửa file cfg (tổng cộng sửa 10 dòng nhé)
    5. Make darknet
    6.Tải pretrain
  %cd /content/gdrive/My\ Drive/darknet
  !./darknet detector train yolo.data cfg/yolov4-custom.cfg yolov4.conv.137 -dont_show -map
  ******************************************************************************** 
  GIẢI THÍCH:
  “!./darknet detector train” là truy cập vào thư mục darknet và thực hiện lệnh train
  yolo.data, cfg/yolov4-custom.cfg là các file ta đã tạo và sửa ở trên
  yolov4.conv.137 là file ta đã tải ở bước 4.11
  -dont_show để tạo ra biểu đồ của loss function phục vụ quá trình giám sát và đánh giá mô hình
  -map tạo ra biểu đồ mAP.
   ******************************************************************************** 
                                STOP TRAINNING
   ******************************************************************************** 
   Trong quá trình train, output được xuất liên tục. Chúng ta chỉ cần quan tâm tới một số vấn đề :1: 3619.999512, 3619.999512 avg loss​ :
        “1″ chính là số vòng train.
        3619.999512 avg loss​: chính là loss.
        
Nếu tab không hoạt động thì Google Colab sẽ tự ngắt kết nối, nên các bạn tải autoclick về và xóa output liên tục nhé.

Khi nào có thể dừng quá trình train:

–  Các bạn có thể thấy như hình ở dưới, khi giá trị loss và mAP đạt được một giá trị nhất định và có vẻ không thể tăng thêm nữa. Thì đó là thời điểm chúng ta có thể dừng. ( quá trình train thường kéo dài >4000 vòng)

– Theo tác giả thì thời điểm có thể dừng quá trình train: là khi loss trung bình có giá trị 0.05 tới 1 đối với các mô hình nhỏ, các nhãn có đặc điểm khác xa hoàn toàn nhau. và loss trung bình có giá trị trong khoảng 1 tới 3 đối với mô hình lớn, nhiều nhãn và các nhãn có đặc điểm tương đồng (khó nhận dạng hơn).
